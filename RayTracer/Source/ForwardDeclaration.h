#pragma once

#include "pch.h"

#ifdef FLOAT_AS_DOUBLE
typedef double Float;
#define FLOAT_0 0.0f
#define FLOAT_1 1.0f
#define FLOAT_2 2.0f
#define FLOAT_3 3.0f
#define FLOAT_INV_2 0.5f
#else
typedef float Float;
#define FLOAT_0 0.0F
#define FLOAT_1 1.0F
#define FLOAT_2 2.0F
#define FLOAT_3 3.0F
#define FLOAT_INV_2 0.5F
#endif


////////////////////////////////////////////////////////////////////////////////
// common
////////////////////////////////////////////////////////////////////////////////

namespace common
{

////////////////////////////////////////////////////////////////////////////////
// math
////////////////////////////////////////////////////////////////////////////////

namespace math
{


////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec2;

typedef Vec2<bool> Vec2b;
typedef Vec2<int> Vec2i;
typedef Vec2<Float> Vec2f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec3;

typedef Vec3<bool> Vec3b;
typedef Vec3<int> Vec3i;
typedef Vec3<Float> Vec3f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec4;

typedef Vec4<bool> Vec4b;
typedef Vec4<unsigned char> Vec4uc;
typedef Vec4<int> Vec4i;
typedef Vec4<Float> Vec4f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Mat3;

typedef Mat3<bool> Mat3x3b;
typedef Mat3<int> Mat3x3i;
typedef Mat3<Float> Mat3x3f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Mat4;

typedef Mat4<bool> Mat4x4b;
typedef Mat4<int> Mat4x4i;
typedef Mat4<Float> Mat4x4f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Bounds2;

typedef Bounds2<int> Bounds2i;
typedef Bounds2<Float> Bounds2f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Bounds3;

typedef Bounds3<int> Bounds3i;
typedef Bounds3<Float> Bounds3f;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Transform;

typedef Transform<Float> Transformf;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class AnimatedTransform;

typedef AnimatedTransform<Float> AnimatedTransformf;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Quaternion;

typedef Quaternion<Float>  Quaternionf;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Ray;

typedef Ray<Float> Rayf;

////////////////////////////////////////////////////////////////////////////////

template<typename T>
class RayDifferential;

typedef RayDifferential<Float> RayDifferentialf;

}

////////////////////////////////////////////////////////////////////////////////
// tool
////////////////////////////////////////////////////////////////////////////////

namespace tool
{


////////////////////////////////////////////////////////////////////////////////

class MemoryArena;

////////////////////////////////////////////////////////////////////////////////

class RandomNumberGenerator;

////////////////////////////////////////////////////////////////////////////////

}

}


////////////////////////////////////////////////////////////////////////////////
// core
////////////////////////////////////////////////////////////////////////////////

namespace core
{


////////////////////////////////////////////////////////////////////////////////

namespace bxdf
{

class BxDF;
class BSDF;
struct FourierBSDFTable;
class FourierBSDF;
class LambertianReflection;
class OrenNayar;
class ScaledBxDF;

class Fresnel;
class FresnelConductor;
class FresnelDielectric;
class FresnelNoOp;

}

////////////////////////////////////////////////////////////////////////////////

namespace camera
{

struct CameraSample;
class Camera;

}

////////////////////////////////////////////////////////////////////////////////

namespace color
{

template <int SPECTRUM_SAMPLE_NUMBER>
class CoefficientSpectrum;
class RGBSpectrum;
class SampledSpectrum;

#define SAMPLED_SPECTRUM
#ifdef SAMPLED_SPECTRUM
typedef SampledSpectrum Spectrum;
#else
typedef RGBSpectrum Spectrum;
#endif

}

////////////////////////////////////////////////////////////////////////////////

namespace film
{

class Film;
class FilmTile;

namespace filter
{

class Filter;

}

}

////////////////////////////////////////////////////////////////////////////////

namespace interaction
{

struct Interaction;
class SurfaceInteraction;
class MediumInteraction;

class PhaseFunction;
class Medium;
struct MediumInterface;

}

////////////////////////////////////////////////////////////////////////////////

namespace light
{

class Light;
class AreaLight;
class VisibilityTester;

}
////////////////////////////////////////////////////////////////////////////////

namespace material
{

class Material;
class MixMaterial;

}

////////////////////////////////////////////////////////////////////////////////

namespace primitive
{

class Primitive;
class GeometricPrimitive;

}

////////////////////////////////////////////////////////////////////////////////

namespace sampler
{

class Sampler;
class GlobalSampler;
class PixelSampler;
class StratifiedSampler;

}

////////////////////////////////////////////////////////////////////////////////

namespace shape
{

class Shape;
class Triangle;
struct TriangleMesh;

}

////////////////////////////////////////////////////////////////////////////////

namespace scene
{

class Scene;

}

////////////////////////////////////////////////////////////////////////////////

namespace texture
{

template <typename T>
class Texture;

}
////////////////////////////////////////////////////////////////////////////////

}