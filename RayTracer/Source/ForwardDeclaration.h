#pragma once

#include "pch.h"

namespace common
{
namespace math
{


////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec2;

typedef Vec2<bool> Vec2b;
typedef Vec2<int> Vec2i;
typedef Vec2<Float> Vec2f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec3;

typedef Vec3<bool> Vec3b;
typedef Vec3<int> Vec3i;
typedef Vec3<Float> Vec3f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Vec4;

typedef Vec4<bool> Vec4b;
typedef Vec4<unsigned char> Vec4uc;
typedef Vec4<int> Vec4i;
typedef Vec4<Float> Vec4f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Mat3;

typedef Mat3<bool> Mat3x3b;
typedef Mat3<int> Mat3x3i;
typedef Mat3<Float> Mat3x3f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Mat4;

typedef Mat4<bool> Mat4x4b;
typedef Mat4<int> Mat4x4i;
typedef Mat4<Float> Mat4x4f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Bounds2;

typedef Bounds2<int> Bounds2i;
typedef Bounds2<Float> Bounds2f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Bounds3;

typedef Bounds3<int> Bounds3i;
typedef Bounds3<Float> Bounds3f;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Transform;

typedef Transform<Float> Transformf;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class AnimatedTransform;

typedef AnimatedTransform<Float> AnimatedTransformf;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
struct Quaternion;

typedef Quaternion<Float>  Quaternionf;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class Ray;

typedef Ray<Float> Rayf;

////////////////////////////////////////////////////////////////////////////////
/// Default template instantiations
////////////////////////////////////////////////////////////////////////////////

template<typename T>
class RayDifferential;

typedef RayDifferential<Float> RayDifferentialf;
}
}

////////////////////////////////////////////////////////////////////////////////

namespace core
{


namespace camera
{

struct CameraSample;
class Camera;

}

namespace color
{

template <int SPECTRUM_SAMPLE_NUMBER>
class CoefficientSpectrum;
class RGBSpectrum;
class SampledSpectrum;

#define SAMPLED_SPECTRUM
#ifdef SAMPLED_SPECTRUM
typedef SampledSpectrum Spectrum;
#else
typedef RGBSpectrum Spectrum;
#endif

}

namespace film
{

class Film;
class FilmTile;

namespace filter
{

class Filter;

}

}


namespace interaction
{

class Interaction;
class SurfaceInteraction;

}

}

////////////////////////////////////////////////////////////////////////////////
